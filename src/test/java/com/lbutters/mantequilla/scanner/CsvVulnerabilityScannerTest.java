package com.lbutters.mantequilla.scanner;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.contains;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class CsvVulnerabilityScannerTest {

    @Test
    public void testFindsBadLines() {
        InputStream is = makeIs("ok, line", "malo,bad", "ok,here", "oh,malo");
        
        List<String> badLines = new CsvVulnerabilityScanner().findBadLines(is)
            .collect(Collectors.toList());
        
        assertThat(badLines, contains("malo,bad", "oh,malo"));
    }
    
    @Test
    public void testFileIsCSV() {
        assertTrue(new CsvVulnerabilityScanner().isCsvFile("foo.csv"));
    }
    
    @Test
    public void testFileIsNotCSV() {
        assertFalse(new CsvVulnerabilityScanner().isCsvFile("foocsv"));
    }
    
    
    @Test
    public void testStripCsvExtensionFromPath() {
        assertEquals("foo", new CsvVulnerabilityScanner().stripCsvExtensionFromPath("foo.csv"));
    }
    
    
    private InputStream makeIs(String ... csvLines) {
        if(csvLines == null) return new ByteArrayInputStream(new byte[0]);
        return new ByteArrayInputStream(Stream.of(csvLines).collect(Collectors.joining("\r\n")).getBytes(UTF_8));
    }
}
